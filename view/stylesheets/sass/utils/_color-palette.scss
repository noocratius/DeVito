///
// Define funções utilitárias para escolha de cor da paleta de cores
//
///

// percentual aplicado a mistura de branco e preto usado pela função get-color
$color-interval: 10%;

//
// Retorna uma cor da paleta de cores
//
//  Seleciona uma cor pelo seu nome, aplica uma nível de transparência a cor
// e mistura tons de branco ou preto a cor. Assim sendo retorna uma cor da
// paleta de cores do projeto. Baseado em
// @link https://scotch.io/tutorials/aesthetic-sass-2-colors
//
//  Cada cor usada pelo projeto possui um nome por isso a função usa as
// variáveis globais da paleta de cores definida no partials 'base/_variables'.
// A função também aplica um nível de transparência definido para a plicação
// seguindo o mapa definido em $opacity-levels, que pode ser encontrado em
// 'base/_variables'. Por final aplica uma mistura de preto ou branco de acordo
// com um percentual definido nas variáveis por intervalos discretos.
//
// @example
//   pick-color(primary, $level: -10, $opacity: active-icon);
//
// @throws Mensagem indicando que nome de cor não existe
//
// @param {String | Color} $color-name [active-icon] - nome da cor
// @param {Number} $level [0] - aplica percentual negativo para branco e positivo
//                               para preto
// @param {Number | String} $opacity [primary] - nível de transparência
//
// @return {Color}
//
@function get-color($color-name: 'primary', $level: 0, $opacity: active-icon) {

  // mantêm cor ou procura uma das cores predefinidas
  $color: if(type-of($color-name) == 'color',
                  $color-name, map-get($colors, $color-name));

  @debug $color;

  // cor base usada na mistura da cor escolhida
  $color-base: if($level < 0, #fff, #000);

  // caso branco seja escolhido
  @if $level < 0 {
    $level: -$level;
  }

  // lança erro caso o nome da cor não exista em sua paleta de cores
  @if not $color {
    @error "Color name \'#{$color-name}\' undefined.";
  }

  // aplica nível de transparência a cor
  $alpha: if(type-of($opacity) == 'number', $opacity,
                      map-get($opacity-levels, $opacity));

  @if $color != transparent {
    @if $alpha {
      $color: rgba($color, $alpha);
    }
  }

  @debug "color-base: " + $color-base;
  @debug "color: " + $color;
  @debug "level * color-interval: " + $level * $color-interval;

  // mistura a cor $color-base em $color, segundo o nível passado por argumento
  $color: mix($color-base, $color, $level * $color-interval);

  @return $color;
}
